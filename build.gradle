plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.dokka' version "1.7.20"
}

android {
    namespace 'studio.badwolfdev.webthings_ktx'
    compileSdk 33

    defaultConfig {
        minSdk 28
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

apply plugin: 'org.jetbrains.dokka'

tasks.dokkaHtml.configure{

    //set the output directory
    outputDirectory.set(file("$buildDir/../docs"))

    //Set module name displayed in the final output
    moduleName.set("${project.name}")

    //suppress inherited function to only keep the one we create
    suppressInheritedMembers.set(true)

    // Use default or set to custom path to cache directory
    // to enable package-list caching
    // When this is set to default, caches are stored in $USER_HOME/.cache/dokka
    //cacheRoot.set(file("default"))

    // Suppress obvious functions like default toString or equals. Defaults to true
    suppressObviousFunctions.set(false)

    dokkaSourceSets {
        // Or source set name, for single-platform the default source sets are `main` and `test`
        configureEach {

            pluginsMapConfiguration.set(
                    [
                            "org.jetbrains.dokka.base.DokkaBase": """{"separateInheritedMembers": true}""",
                            "org.jetbrains.dokka.versioning.VersioningPlugin": """{ "version": "1.0" }"""
                    ]
            )

            // Used when configuring source sets manually for declaring which source sets this one depends on
            //dependsOn("otherSourceSetName")

            // Used to remove a source set from documentation, test source sets are suppressed by default
            //suppress.set(false)

            // Used to prevent resolving package-lists online. When this option is set to true, only local files are resolved
            //offlineMode.set(false)

            // Use to include or exclude non public members
            includeNonPublic.set(true)

            // Do not output deprecated members. Applies globally, can be overridden by packageOptions
            skipDeprecated.set(false)

            // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
            reportUndocumented.set(true)

            // Do not create index pages for empty packages
            skipEmptyPackages.set(true)

            // This name will be shown in the final output
            //displayName.set("TEST CONFIGURE NAME")

            // Platform used for code analysis. See the "Platforms" section of this readme
            //platform.set(org.jetbrains.dokka.Platform.jvm)

            // Property used for manual addition of files to the classpath
            // This property does not override the classpath collected automatically but appends to it
            //classpath.from(file("libs/dependency.jar"))

            // List of files with module and package documentation TODO
            // https://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
            includes.from("modules.md")

            // List of files or directories containing sample code (referenced with @sample tags)
            //samples.from("samples/basic.kt", "samples/advanced.kt")

            // By default, sourceRoots are taken from Kotlin Plugin and kotlinTasks, following roots will be appended to them
            // Repeat for multiple sourceRoots
            //sourceRoot.from(file("src"))

            // Specifies the location of the project source code on the Web.
            // If provided, Dokka generates "source" links for each declaration.
            // Repeat for multiple mappings
            /*sourceLink {
                // Unix based directory relative path to the root of the project (where you execute gradle respectively).
                //localDirectory.set(file("src/main/kotlin"))

                // URL showing where the source code can be accessed through the web browser
                remoteUrl.set(java.net.URL(
                        "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin"))
                // Suffix which is used to append the line number to the URL. Use #L for GitHub
                remoteLineSuffix.set("#L")
            }*/

            // Used for linking to JDK documentation
            //jdkVersion.set(8)

            // Disable linking to online kotlin-stdlib documentation
            noStdlibLink.set(false)

            // Disable linking to online JDK documentation
            noJdkLink.set(false)

            // Disable linking to online Android documentation (only applicable for Android projects)
            noAndroidSdkLink.set(false)

            // Allows linking to documentation of the project"s dependencies (generated with Javadoc or Dokka)
            // Repeat for multiple links
            /*externalDocumentationLink {
                // Root URL of the generated documentation to link with. The trailing slash is required!
                //url = URL("https://example.com/docs/")

                // If package-list file is located in non-standard location
                // packageListUrl = URL("file:///home/user/localdocs/package-list")
            }*/

            // Allows to customize documentation generation options on a per-package basis
            // Repeat for multiple packageOptions
            // If multiple packages match the same matchingRegex, the longuest matchingRegex will be used
            /*perPackageOption {
                matchingRegex.set("kotlin($|\\.).*") // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                skipDeprecated.set(false)
                reportUndocumented.set(true) // Emit warnings about not documented members
                includeNonPublic.set(false)
            }
            // Suppress a package
            perPackageOption {
                matchingRegex.set(".*\.internal.*") // will match all .internal packages and sub-packages
                suppress.set(true)
            }*/
        }
    }
}



dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.google.code.gson:gson:2.10"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk-android:1.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

}